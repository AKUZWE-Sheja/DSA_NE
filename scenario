Rwandan gvt -> provinces, districts, sectors, cells, villages
It has capital city Kigali and 6 other secondary citie: Huye, Muhanga, Musanze, Nygatare, Rubavu, Rusizi
It also has various ministries including Ministry of INfrastructure (oversseing sustainable infrastrucutre dvlpt. in key sectors... In transport, it's focused on connecting secondary cities to the capital. While some roads exist in place, others are just in plan. Here are exisiting roadsand those scheduled)
Kigali-Muhanga (28.6 Billion RWF)
Kigali-Musnze (28.6 Billion RWF)
Kigali-Nyagatare (70.84 Billion RWF)
Muhanga-Huye (56.7 Billion RWF)
Musanze-Rubavu (33.7 Billion RWF)
Huye-Rusizi (117.5 Billion RWF)
Musanze-Nyagatare (96.14 Billion RWF)
Muhanga-Musnze (66.3 Billion RWF)
Each city has a numerical identifier (must be autogenerated):
Kigali(1), Huye (2), Muhanga (3), Musanze (4), Nygatare (5), Rubavu (6), Rusizi (7)
As a C++ DEV, I have to develop this app that solves the efficiency issue
Menu:
1. Add new city(ies)
2. Add roads btn cities
3. Add budget for roads
4. Edit city
5. Search city by index
6. Display cities
7. Display roads (cities & roads in adjacency matrix)
8. Display recorded data on console (dislay matrix from 7 & budgets adjacency matrix)
9. Exit
--- saving data in cities.txt (index & city_name) and roads.txt (nbr, road, budget)

First, draw a flowchart for the flow of this app, othjer things will come later



    A[Start Program] --> B[Initialize Data Structures<br>(Load cities.txt, roads.txt)]
    B --> C[Display Menu<br>1. Add new city(ies)<br>2. Add roads btn cities<br>3. Add budget for roads<br>4. Edit city<br>5. Search city by index<br>6. Display cities<br>7. Display roads (adjacency matrix)<br>8. Display recorded data<br>9. Exit]
    C --> D[Get User Input]
    D -->|Valid Input| E{Menu Choice}
    D -->|Invalid Input| F[Display Error<br>Invalid Option]
    F --> C

    E -->|1| G[Add New City]
    G --> H[Input City Name]
    H --> I[Auto-generate City Index]
    I --> J[Add to City List]
    J --> K[Save to cities.txt]
    K --> C

    E -->|2| L[Add Road Between Cities]
    L --> M[Input Two City Indices]
    M --> N[Validate Cities Exist]
    N -->|Valid| O[Add Road to Adjacency Matrix]
    N -->|Invalid| P[Display Error<br>Invalid City Index]
    O --> Q[Save to roads.txt]
    Q --> C
    P --> C

    E -->|3| R[Add Budget for Road]
    R --> S[Input Two City Indices]
    S --> T[Validate Road Exists]
    T -->|Valid| U[Input Budget]
    U --> V[Update Budget in Matrix]
    V --> W[Save to roads.txt]
    W --> C
    T -->|Invalid| X[Display Error<br>No Road Exists]
    X --> C

    E -->|4| Y[Edit City]
    Y --> Z[Input City Index]
    Z --> AA[Validate City Index]
    AA -->|Valid| AB[Input New City Name]
    AB --> AC[Update City Name]
    AC --> AD[Save to cities.txt]
    AD --> C
    AA -->|Invalid| AE[Display Error<br>Invalid City Index]
    AE --> C

    E -->|5| AF[Search City by Index]
    AF --> AG[Input City Index]
    AG --> AH[Validate City Index]
    AH -->|Valid| AI[Display City Name]
    AI --> C
    AH -->|Invalid| AJ[Display Error<br>Invalid City Index]
    AJ --> C

    E -->|6| AK[Display Cities]
    AK --> AL[Read City List]
    AL --> AM[Display Index and City Name]
    AM --> C

    E -->|7| AN[Display Roads]
    AN --> AO[Read Adjacency Matrix]
    AO --> AP[Display Adjacency Matrix]
    AP --> C

    E -->|8| AQ[Display Recorded Data]
    AQ --> AR[Read Adjacency Matrix]
    AR --> AS[Read Budget Matrix]
    AS --> AT[Display Adjacency Matrix<br>and Budget Matrix]
    AT --> C

    E -->|9| AU[Save All Data to cities.txt, roads.txt]
    AU --> AV[Exit Program]









